//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCapInsetsPlugin\src\main\java\com\ashera\capinsets\CapInsetsViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CapInsetsViewImpl.h"
#include "IAttributable.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASCapInsetsViewImpl () {
 @public
  id<ASIWidget> w_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)applyForegroundCapInsetsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue;

- (void)applyForegroundCapInsetsRightWithASIWidget:(id<ASIWidget>)w
                                            withId:(id)objValue;

- (void)applyForegroundCapInsetsLeftWithASIWidget:(id<ASIWidget>)w
                                           withId:(id)objValue;

- (void)applyForegroundCapInsetsBottomWithASIWidget:(id<ASIWidget>)w
                                             withId:(id)objValue;

- (void)applyForegroundCapInsetsTopWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue;

- (void)applyCapInsetsWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue;

- (void)applyCapInsetsRightWithASIWidget:(id<ASIWidget>)w
                                  withId:(id)objValue;

- (void)applyCapInsetsLeftWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

- (void)applyCapInsetsBottomWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue;

- (void)applyCapInsetsTopWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue;

- (bool)isRTLayoutCapInsetsWithASIWidget:(id<ASIWidget>)w;

@end

J2OBJC_FIELD_SETTER(ASCapInsetsViewImpl, w_, id<ASIWidget>)

__attribute__((unused)) static void ASCapInsetsViewImpl_initWithASIWidget_(ASCapInsetsViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static ASCapInsetsViewImpl *new_ASCapInsetsViewImpl_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCapInsetsViewImpl *create_ASCapInsetsViewImpl_initWithASIWidget_(id<ASIWidget> widget);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyForegroundCapInsetsWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyForegroundCapInsetsRightWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyForegroundCapInsetsLeftWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyForegroundCapInsetsBottomWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyForegroundCapInsetsTopWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyCapInsetsWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyCapInsetsRightWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyCapInsetsLeftWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyCapInsetsBottomWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASCapInsetsViewImpl_applyCapInsetsTopWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue);

__attribute__((unused)) static bool ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(ASCapInsetsViewImpl *self, id<ASIWidget> w);

NSString *ASCapInsetsViewImpl_LOCAL_NAME = @"CapInsetsView";

@implementation ASCapInsetsViewImpl

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASCapInsetsViewImpl_initWithASIWidget_(self, widget);
  return self;
}

- (NSString *)getLocalName {
  return ASCapInsetsViewImpl_LOCAL_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCapInsetsViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIAttributable>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  ASCapInsetsViewImpl *newIntance = new_ASCapInsetsViewImpl_initWithASIWidget_(widget);
  return newIntance;
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundCapInsets"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundCapInsetsTop"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundCapInsetsBottom"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundCapInsetsLeft"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundCapInsetsRight"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundCapInsets"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundCapInsetsTop"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundCapInsetsBottom"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundCapInsetsLeft"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundCapInsetsRight"])) withTypeWithNSString:@"dimensiondppx"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w_)) asWidget], [ADView class]);
  id nativeWidget = [((id<ASIWidget>) nil_chk(w_)) asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"backgroundCapInsets", @"backgroundCapInsetsTop", @"backgroundCapInsetsBottom", @"backgroundCapInsetsLeft", @"backgroundCapInsetsRight", @"foregroundCapInsets", @"foregroundCapInsetsTop", @"foregroundCapInsetsBottom", @"foregroundCapInsetsLeft", @"foregroundCapInsetsRight" }, 10)) {
    case 0:
    {
      ASCapInsetsViewImpl_applyCapInsetsWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 1:
    {
      ASCapInsetsViewImpl_applyCapInsetsTopWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 2:
    {
      ASCapInsetsViewImpl_applyCapInsetsBottomWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 3:
    {
      ASCapInsetsViewImpl_applyCapInsetsLeftWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 4:
    {
      ASCapInsetsViewImpl_applyCapInsetsRightWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 5:
    {
      ASCapInsetsViewImpl_applyForegroundCapInsetsWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 6:
    {
      ASCapInsetsViewImpl_applyForegroundCapInsetsTopWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 7:
    {
      ASCapInsetsViewImpl_applyForegroundCapInsetsBottomWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 8:
    {
      ASCapInsetsViewImpl_applyForegroundCapInsetsLeftWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    case 9:
    {
      ASCapInsetsViewImpl_applyForegroundCapInsetsRightWithASIWidget_withId_(self, w_, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w_)) asWidget], [ADView class]);
  id nativeWidget = [((id<ASIWidget>) nil_chk(w_)) asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (void)applyForegroundCapInsetsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue {
  ASCapInsetsViewImpl_applyForegroundCapInsetsWithASIWidget_withId_(self, w, objValue);
}

- (void)applyForegroundCapInsetsRightWithASIWidget:(id<ASIWidget>)w
                                            withId:(id)objValue {
  ASCapInsetsViewImpl_applyForegroundCapInsetsRightWithASIWidget_withId_(self, w, objValue);
}

- (void)applyForegroundCapInsetsLeftWithASIWidget:(id<ASIWidget>)w
                                           withId:(id)objValue {
  ASCapInsetsViewImpl_applyForegroundCapInsetsLeftWithASIWidget_withId_(self, w, objValue);
}

- (void)applyForegroundCapInsetsBottomWithASIWidget:(id<ASIWidget>)w
                                             withId:(id)objValue {
  ASCapInsetsViewImpl_applyForegroundCapInsetsBottomWithASIWidget_withId_(self, w, objValue);
}

- (void)applyForegroundCapInsetsTopWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue {
  ASCapInsetsViewImpl_applyForegroundCapInsetsTopWithASIWidget_withId_(self, w, objValue);
}

- (void)applyCapInsetsWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue {
  ASCapInsetsViewImpl_applyCapInsetsWithASIWidget_withId_(self, w, objValue);
}

- (void)applyCapInsetsRightWithASIWidget:(id<ASIWidget>)w
                                  withId:(id)objValue {
  ASCapInsetsViewImpl_applyCapInsetsRightWithASIWidget_withId_(self, w, objValue);
}

- (void)applyCapInsetsLeftWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASCapInsetsViewImpl_applyCapInsetsLeftWithASIWidget_withId_(self, w, objValue);
}

- (void)applyCapInsetsBottomWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue {
  ASCapInsetsViewImpl_applyCapInsetsBottomWithASIWidget_withId_(self, w, objValue);
}

- (void)applyCapInsetsTopWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue {
  ASCapInsetsViewImpl_applyCapInsetsTopWithASIWidget_withId_(self, w, objValue);
}

- (bool)isRTLayoutCapInsetsWithASIWidget:(id<ASIWidget>)w {
  return ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(self, w);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIAttributable;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(getLocalName);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(newInstanceWithASIWidget:);
  methods[4].selector = @selector(loadAttributesWithNSString:);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[7].selector = @selector(applyForegroundCapInsetsWithASIWidget:withId:);
  methods[8].selector = @selector(applyForegroundCapInsetsRightWithASIWidget:withId:);
  methods[9].selector = @selector(applyForegroundCapInsetsLeftWithASIWidget:withId:);
  methods[10].selector = @selector(applyForegroundCapInsetsBottomWithASIWidget:withId:);
  methods[11].selector = @selector(applyForegroundCapInsetsTopWithASIWidget:withId:);
  methods[12].selector = @selector(applyCapInsetsWithASIWidget:withId:);
  methods[13].selector = @selector(applyCapInsetsRightWithASIWidget:withId:);
  methods[14].selector = @selector(applyCapInsetsLeftWithASIWidget:withId:);
  methods[15].selector = @selector(applyCapInsetsBottomWithASIWidget:withId:);
  methods[16].selector = @selector(applyCapInsetsTopWithASIWidget:withId:);
  methods[17].selector = @selector(isRTLayoutCapInsetsWithASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "newInstance", "loadAttributes", "LNSString;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "applyForegroundCapInsets", "LASIWidget;LNSObject;", "applyForegroundCapInsetsRight", "applyForegroundCapInsetsLeft", "applyForegroundCapInsetsBottom", "applyForegroundCapInsetsTop", "applyCapInsets", "applyCapInsetsRight", "applyCapInsetsLeft", "applyCapInsetsBottom", "applyCapInsetsTop", "isRTLayoutCapInsets", &ASCapInsetsViewImpl_LOCAL_NAME };
  static const J2ObjcClassInfo _ASCapInsetsViewImpl = { "CapInsetsViewImpl", "com.ashera.capinsets", ptrTable, methods, fields, 7, 0x1, 18, 2, -1, -1, -1, -1, -1 };
  return &_ASCapInsetsViewImpl;
}

@end

void ASCapInsetsViewImpl_initWithASIWidget_(ASCapInsetsViewImpl *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->w_ = widget;
}

ASCapInsetsViewImpl *new_ASCapInsetsViewImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASCapInsetsViewImpl, initWithASIWidget_, widget)
}

ASCapInsetsViewImpl *create_ASCapInsetsViewImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASCapInsetsViewImpl, initWithASIWidget_, widget)
}

void ASCapInsetsViewImpl_init(ASCapInsetsViewImpl *self) {
  NSObject_init(self);
}

ASCapInsetsViewImpl *new_ASCapInsetsViewImpl_init() {
  J2OBJC_NEW_IMPL(ASCapInsetsViewImpl, init)
}

ASCapInsetsViewImpl *create_ASCapInsetsViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASCapInsetsViewImpl, init)
}

void ASCapInsetsViewImpl_applyForegroundCapInsetsWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  ASCapInsetsViewImpl_applyForegroundCapInsetsRightWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyForegroundCapInsetsLeftWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyForegroundCapInsetsTopWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyForegroundCapInsetsBottomWithASIWidget_withId_(self, w, objValue);
}

void ASCapInsetsViewImpl_applyForegroundCapInsetsRightWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  NSString *capInsetsKey = @"capInsetsRight";
  if (ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(self, w)) {
    capInsetsKey = @"capInsetsLeft";
  }
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundCapInsetsTop", @"foregroundCapInsetsBottom", @"foregroundCapInsetsLeft", @"foregroundCapInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ capInsetsKey, objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyForegroundCapInsetsLeftWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  NSString *capInsetsKey = @"capInsetsLeft";
  if (ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(self, w)) {
    capInsetsKey = @"capInsetsRight";
  }
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundCapInsetsTop", @"foregroundCapInsetsBottom", @"foregroundCapInsetsLeft", @"foregroundCapInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ capInsetsKey, objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyForegroundCapInsetsBottomWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundCapInsetsTop", @"foregroundCapInsetsBottom", @"foregroundCapInsetsLeft", @"foregroundCapInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsBottom", objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyForegroundCapInsetsTopWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundCapInsetsTop", @"foregroundCapInsetsBottom", @"foregroundCapInsetsLeft", @"foregroundCapInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyCapInsetsWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  ASCapInsetsViewImpl_applyCapInsetsRightWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyCapInsetsLeftWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyCapInsetsTopWithASIWidget_withId_(self, w, objValue);
  ASCapInsetsViewImpl_applyCapInsetsBottomWithASIWidget_withId_(self, w, objValue);
}

void ASCapInsetsViewImpl_applyCapInsetsRightWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  NSString *capInsetsKey = @"capInsetsRight";
  if (ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(self, w)) {
    capInsetsKey = @"capInsetsLeft";
  }
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", @"capInsetsBottom", @"capInsetsLeft", @"capInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ capInsetsKey, objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyCapInsetsLeftWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  NSString *capInsetsKey = @"capInsetsLeft";
  if (ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(self, w)) {
    capInsetsKey = @"capInsetsRight";
  }
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", @"capInsetsBottom", @"capInsetsLeft", @"capInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ capInsetsKey, objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyCapInsetsBottomWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", @"capInsetsBottom", @"capInsetsLeft", @"capInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsBottom", objValue } count:2 type:NSObject_class_()]];
}

void ASCapInsetsViewImpl_applyCapInsetsTopWithASIWidget_withId_(ASCapInsetsViewImpl *self, id<ASIWidget> w, id objValue) {
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"capInsets" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", @"capInsetsBottom", @"capInsetsLeft", @"capInsetsRight" } count:4 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"capInsetsTop", objValue } count:2 type:NSObject_class_()]];
}

bool ASCapInsetsViewImpl_isRTLayoutCapInsetsWithASIWidget_(ASCapInsetsViewImpl *self, id<ASIWidget> w) {
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(w)) {
    return true;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if (!ADXViewCompat_isLayoutDirectionResolvedWithADView_(view)) {
    ADViewGroup *parent = (ADViewGroup *) cast_chk([((ADView *) nil_chk(view)) getParent], [ADViewGroup class]);
    while (parent != nil) {
      if (ADXViewCompat_getLayoutDirectionWithADView_(parent) == ADXViewCompat_LAYOUT_DIRECTION_RTL) {
        return true;
      }
      parent = (ADViewGroup *) cast_chk([parent getParent], [ADViewGroup class]);
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCapInsetsViewImpl)

J2OBJC_NAME_MAPPING(ASCapInsetsViewImpl, "com.ashera.capinsets", "AS")
